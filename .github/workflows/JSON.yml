name: building json

on:
  workflow_dispatch:
    inputs:
      upload_to_release:
        description: 'Upload ZIP to GitHub Release?'
        type: boolean
        required: true
        default: false
      upload_to_telegram:
        description: 'Upload ZIP to Telegram?'
        type: boolean
        required: true
        default: false
      branch:
        description: 'Branch to build from'
        type: string
        required: true
        default: 'JSON'

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-24.04
    environment: Telegram

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Set up Android SDK and NDK
        run: |
          echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV
          mkdir -p $ANDROID_HOME/cmdline-tools
          wget https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -O cmdline-tools.zip
          unzip cmdline-tools.zip -d $ANDROID_HOME/cmdline-tools
          if [ -d "$ANDROID_HOME/cmdline-tools/cmdline-tools" ]; then
            mv $ANDROID_HOME/cmdline-tools/cmdline-tools $ANDROID_HOME/cmdline-tools/latest
          elif [ -d "$ANDROID_HOME/cmdline-tools/tools" ]; then
            mv $ANDROID_HOME/cmdline-tools/tools $ANDROID_HOME/cmdline-tools/latest
          else
            echo "Unexpected directory structure after unzip:"
            ls -la $ANDROID_HOME/cmdline-tools
            exit 1
          fi
          echo "$ANDROID_HOME/cmdline-tools/latest/bin" >> $GITHUB_PATH
          # Use NDK r25b as per Dobby's Builder
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "ndk;25.2.9519653" "platforms;android-34" "build-tools;34.0.0"
          echo "NDK_PATH=$ANDROID_HOME/ndk/25.2.9519653" >> $GITHUB_ENV

      - name: Accept Android SDK licenses
        run: |
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || echo "License acceptance failed!"

      - name: Install build tools and CMake
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential zip git
          # Install CMake 3.25.2 as per Dobby's Builder
          wget https://github.com/Kitware/CMake/releases/download/v3.25.2/cmake-3.25.2-linux-x86_64.sh -O cmake.sh
          chmod +x cmake.sh
          ./cmake.sh --prefix=$HOME/opt/cmake-3.25.2 --skip-license
          echo "$HOME/opt/cmake-3.25.2/bin" >> $GITHUB_PATH

      - name: Fetch Zygisk Headers and JSON Library
        run: |
          mkdir -p zygisk include/nlohmann
          wget https://raw.githubusercontent.com/topjohnwu/zygisk-module-sample/master/module/jni/zygisk.hpp -O zygisk/zygisk.hh
          wget https://github.com/nlohmann/json/releases/download/v3.11.3/json.hpp -O include/nlohmann/json.hpp

      - name: Build Dobby from Source
        run: |
          git clone https://github.com/jmpews/Dobby.git dobby
          cd dobby
          # Fetch platform_builder.py and related scripts
          cp scripts/platform_builder.py .
          cp -r builtin-plugin tools source external include scripts/
          # Build for Android (arm64-v8a and armeabi-v7a)
          python3 platform_builder.py \
            --platform=android \
            --arch=all \
            --cmake_dir=$HOME/opt/cmake-3.25.2 \
            --android_ndk_dir=$NDK_PATH
          # Copy built libraries
          mkdir -p ../dobby
          cp build/android/arm64-v8a/libdobby.a ../dobby/libdobby-arm64.a
          cp build/android/armeabi-v7a/libdobby.a ../dobby/libdobby-armv7-a.a
          cp include/dobby.h ../dobby/dobby.h
          cd ..

      - name: Fetch config.json
        run: |
          wget https://raw.githubusercontent.com/AlirezaParsi/COPG/refs/heads/JSON/config.json -O config.json

      - name: Build Project (arm64-v8a)
        uses: threeal/cmake-action@v2.1.0
        with:
          build-dir: build/arm64-v8a
          args: |
            -DCMAKE_TOOLCHAIN_FILE=${{ env.NDK_PATH }}/build/cmake/android.toolchain.cmake
            -DANDROID_ABI=arm64-v8a
            -DANDROID_PLATFORM=android-34
            -DCMAKE_MAKE_PROGRAM=/usr/bin/make
            -DDOBBY_LIBRARY=${{ github.workspace }}/dobby/libdobby-arm64.a

      - name: Check arm64-v8a output
        run: |
          if [ ! -f "build/arm64-v8a/libspoof.so" ]; then
            echo "Error: arm64-v8a library not built!"
            ls -la build/arm64-v8a
            exit 1
          fi

      - name: Build Project (armeabi-v7a)
        uses: threeal/cmake-action@v2.1.0
        with:
          build-dir: build/armeabi-v7a
          args: |
            -DCMAKE_TOOLCHAIN_FILE=${{ env.NDK_PATH }}/build/cmake/android.toolchain.cmake
            -DANDROID_ABI=armeabi-v7a
            -DANDROID_PLATFORM=android-34
            -DCMAKE_MAKE_PROGRAM=/usr/bin/make
            -DDOBBY_LIBRARY=${{ github.workspace }}/dobby/libdobby-armv7-a.a

      - name: Check armeabi-v7a output
        run: |
          if [ ! -f "build/armeabi-v7a/libspoof.so" ]; then
            echo "Error: armeabi-v7a library not built!"
            ls -la build/armeabi-v7a
            exit 1
          fi

      - name: Prepare module structure
        run: |
          mkdir -p module/zygisk
          mkdir -p module/META-INF/com/google/android
          cp build/arm64-v8a/libspoof.so module/zygisk/arm64-v8a.so
          cp build/armeabi-v7a/libspoof.so module/zygisk/armeabi-v7a.so
          chmod 755 module/zygisk/arm64-v8a.so
          chmod 755 module/zygisk/armeabi-v7a.so
          cat > module/module.prop << 'EOF'
          id=COPG
          name=✨ COPG spoof ✨
          version=2.5
          versionCode=250
          author=AlirezaParsi
          description=Spoof your device for games. Run 'sh $MODPATH/action.sh' to update config.json from GitHub.
          support=https://t.me/theaosp
          updateJson=https://raw.githubusercontent.com/AlirezaParsi/COPG/refs/heads/JSON/update.json
          minMagisk=20.4
          EOF
          cat > module/customize.sh << 'EOF'
          #!/system/bin/sh
          if ! $BOOTMODE; then
            ui_print "*********************************************************"
            ui_print "! Install from recovery is NOT supported"
            ui_print "! Please install from Magisk, KernelSU, or APatch app"
            abort "*********************************************************"
          fi
          if [ "$API" -lt 26 ]; then
            abort "! This module requires Android 8.0 or higher"
          fi
          check_zygisk() {
            ZYGISK_MODULE="/data/adb/modules/ZygiskNext"
            MAGISK_DIR="/data/adb/magisk"
            ZYGISK_MSG="Zygisk is not enabled. Please either:
            - Enable Zygisk in Magisk settings and reboot
            - Install ZygiskNext module for KernelSU and reboot"
            if [ -d "/data/adb/ksu" ]; then
              if ! [ -d "$ZYGISK_MODULE" ]; then
                ui_print "*********************************************************"
                ui_print "! $ZYGISK_MSG"
                abort "*********************************************************"
              else
                ui_print "- ZygiskNext detected for KernelSU"
              fi
            elif [ -d "$MAGISK_DIR" ]; then
              ZYGISK_STATUS=$(magisk --sqlite "SELECT value FROM settings WHERE key='zygisk';" 2>/dev/null)
              if [ "$ZYGISK_STATUS" = "value=0" ] || [ -z "$ZYGISK_STATUS" ]; then
                ui_print "*********************************************************"
                ui_print "! $ZYGISK_MSG"
                abort "*********************************************************"
              else
                ui_print "- Zygisk enabled in Magisk"
              fi
            else
              ui_print "*********************************************************"
              ui_print "! No supported root solution detected!"
              ui_print "! This module requires Magisk with Zygisk or KernelSU with ZygiskNext"
              abort "*********************************************************"
            fi
          }
          check_zygisk
          chmod +x "$MODPATH/action.sh"
          ui_print "- SpoofModule setup complete"
          ui_print "- Run 'sh $MODPATH/action.sh' to download config.json"
          EOF
          chmod 755 module/customize.sh
          cat > module/action.sh << 'EOF'
          #!/system/bin/sh
          MODDIR="/data/adb/modules/COPG"
          CONFIG_URL="https://raw.githubusercontent.com/AlirezaParsi/COPG/refs/heads/JSON/config.json"
          CONFIG_PATH="$MODDIR/config.json"
          log() {
            echo "🌟 [COPG] $1"
          }
          if command -v curl >/dev/null 2>&1; then
            DOWNLOADER="curl -s -o"
          elif command -v wget >/dev/null 2>&1; then
            DOWNLOADER="wget -q -O"
          else
            log "❌ Error: curl or wget not found. Please install one to download config."
            exit 1
          fi
          log "⬇️ Downloading config.json from GitHub..."
          $DOWNLOADER "$CONFIG_PATH" "$CONFIG_URL"
          if [ $? -eq 0 ]; then
            log "✅ Config downloaded successfully!"
            log "📍 Saved to: $CONFIG_PATH"
            chmod 644 "$CONFIG_PATH"
          else
            log "❌ Failed to download config.json. Check your internet or URL."
            exit 1
          fi
          log "✨ SpoofModule config update complete!"
          EOF
          chmod 755 module/action.sh
          cat > module/uninstall.sh << 'EOF'
          rm -rf /data/adb/modules/COPG
          EOF
          chmod 755 module/uninstall.sh
          cat > module/META-INF/com/google/android/update-binary << 'EOF'
          umask 022
          ui_print() { echo "$1"; }
          require_new_magisk() {
            ui_print "*******************************"
            ui_print " Please install Magisk v20.4+! "
            ui_print "*******************************"
            exit 1
          }
          OUTFD=$2
          ZIPFILE=$3
          [ -f /data/adb/magisk/util_functions.sh ] || require_new_magisk
          . /data/adb/magisk/util_functions.sh
