name: building json

on:
  workflow_dispatch:
    inputs:
      upload_to_release:
        description: 'Upload ZIP to GitHub Release?'
        type: boolean
        required: true
        default: false
      upload_to_telegram:
        description: 'Upload ZIP to Telegram?'
        type: boolean
        required: true
        default: false
      branch:
        description: 'Branch to build from'
        type: string
        required: true
        default: 'JSON'

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-24.04
    environment: Telegram

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Set up Android SDK and NDK
        run: |
          echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV
          mkdir -p $ANDROID_HOME/cmdline-tools
          wget https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -O cmdline-tools.zip
          unzip cmdline-tools.zip -d $ANDROID_HOME/cmdline-tools
          if [ -d "$ANDROID_HOME/cmdline-tools/cmdline-tools" ]; then
            mv $ANDROID_HOME/cmdline-tools/cmdline-tools $ANDROID_HOME/cmdline-tools/latest
          elif [ -d "$ANDROID_HOME/cmdline-tools/tools" ]; then
            mv $ANDROID_HOME/cmdline-tools/tools $ANDROID_HOME/cmdline-tools/latest
          else
            echo "Unexpected directory structure after unzip:"
            ls -la $ANDROID_HOME/cmdline-tools
            exit 1
          fi
          echo "$ANDROID_HOME/cmdline-tools/latest/bin" >> $GITHUB_PATH
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "ndk;25.2.9519653" "platforms;android-34" "build-tools;34.0.0"
          echo "NDK_PATH=$ANDROID_HOME/ndk/25.2.9519653" >> $GITHUB_ENV

      - name: Accept Android SDK licenses
        run: |
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || echo "License acceptance failed!"

      - name: Install build tools and CMake
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential zip git
          mkdir -p $HOME/opt/cmake-3.25.2
          wget https://github.com/Kitware/CMake/releases/download/v3.25.2/cmake-3.25.2-linux-x86_64.sh -O cmake.sh
          chmod +x cmake.sh
          echo "Extracting CMake to $HOME/opt/cmake-3.25.2..."
          ./cmake.sh --prefix=$HOME/opt/cmake-3.25.2 --skip-license || {
            echo "CMake extraction failed! Directory contents:"
            ls -la $HOME/opt/cmake-3.25.2
            exit 1
          }
          echo "CMake installation completed. Verifying:"
          $HOME/opt/cmake-3.25.2/bin/cmake --version
          echo "$HOME/opt/cmake-3.25.2/bin" >> $GITHUB_PATH

      - name: Fetch Zygisk Headers and JSON Library
        run: |
          mkdir -p zygisk include/nlohmann
          wget https://raw.githubusercontent.com/topjohnwu/zygisk-module-sample/master/module/jni/zygisk.hpp -O zygisk/zygisk.hh
          wget https://github.com/nlohmann/json/releases/download/v3.11.3/json.hpp -O include/nlohmann/json.hpp

      - name: Build Dobby from Source
        run: |
          git clone https://github.com/jmpews/Dobby.git dobby
          cd dobby
          # Overwrite platform_builder.py with fixed version
          echo "$PLATFORM_BUILDER_PY" > scripts/platform_builder.py
          chmod +x scripts/platform_builder.py
          ls -la  # Debug: Show repo contents
          python3 scripts/platform_builder.py \
            --platform=android \
            --arch=all \
            --cmake_dir=$HOME/opt/cmake-3.25.2 \
            --android_ndk_dir=$NDK_PATH
          mkdir -p ../dobby
          cp build/android/arm64-v8a/libdobby.a ../dobby/libdobby-arm64.a
          cp build/android/armeabi-v7a/libdobby.a ../dobby/libdobby-armv7-a.a
          cp include/dobby.h ../dobby/dobby.h
          cd ..
        env:
          PLATFORM_BUILDER_PY: |
            import os
            import shlex
            import re
            import shutil
            import subprocess
            import sys
            import logging

            import argparse

            platforms = {
              "macos": ["x86_64", "arm64", "arm64e"],
              "iphoneos": ["arm64", "arm64e"],
              "linux": ["x86", "x86_64", "arm", "arm64"],
              "android": ["x86", "x86_64", "armeabi-v7a", "arm64-v8a"]
            }

            class PlatformBuilder(object):
              cmake_args = list()
              cmake_build_type = "Release"
              cmake_build_verbose = False
              cmake_build_dir = ""

              library_build_type = "static"

              project_dir = ""
              output_dir = ""

              shared_output_name = ""
              static_output_name = ""

              platform = ""
              arch = ""

              def __init__(self, project_dir, library_build_type, platform, arch):
                self.project_dir = project_dir
                self.library_build_type = library_build_type
                self.platform = platform
                self.arch = arch

                self.cmake_build_dir = f"{self.project_dir}/build/cmake-build-{platform}-{arch}"
                self.output_dir = f"{self.project_dir}/build/{platform}/{arch}"

                self.cmake = "cmake" if PlatformBuilder.cmake_dir is None else f"{PlatformBuilder.cmake_dir}/bin/cmake"
                self.clang = "clang" if PlatformBuilder.llvm_dir is None else f"{PlatformBuilder.llvm_dir}/bin/clang"
                self.clangxx = "clang++" if PlatformBuilder.llvm_dir is None else f"{PlatformBuilder.llvm_dir}/bin/clang++"

                self.setup_common_args()

              def cmake_generate_build_system(self):
                cmake_cmd_options = ["-S {}".format(self.project_dir), "-B {}".format(self.cmake_build_dir)]
                cmd = [self.cmake] + cmake_cmd_options + self.cmake_args
                cmd_line = " ".join(shlex.quote(arg) for arg in cmd)
                print(cmd_line)
                os.system(cmd_line)

              def setup_common_args(self):
                self.cmake_args += [f"-DCMAKE_C_COMPILER={self.clang}", f"-DCMAKE_CXX_COMPILER={self.clangxx}"]
                self.cmake_args += ["-DCMAKE_BUILD_TYPE={}".format(self.cmake_build_type)]

              def build(self):
                subprocess.run(["mkdir", "-p", self.output_dir], check=True)
                self.cmake_generate_build_system()

                build_cmd = "cmake --build . --clean-first --target dobby --target dobby_static -- -j8"
                subprocess.run(build_cmd, cwd=self.cmake_build_dir, shell=True, check=True)

                os.makedirs(self.output_dir, exist_ok=True)
                if os.path.exists(f"{self.cmake_build_dir}/{self.shared_output_name}"):
                  os.system(f"cp {self.cmake_build_dir}/{self.shared_output_name} {self.output_dir}")
                if os.path.exists(f"{self.cmake_build_dir}/{self.static_output_name}"):
                  os.system(f"cp {self.cmake_build_dir}/{self.static_output_name} {self.output_dir}")

            class AndroidPlatformBuilder(PlatformBuilder):
              def __init__(self, android_ndk_dir, project_dir, library_build_type, arch):
                super().__init__(project_dir, library_build_type, "android", arch)
                self.shared_output_name = "libdobby.so"
                self.static_output_name = "libdobby.a"
                android_api_level = 21 if arch in ["arm64-v8a", "x86_64"] else 19
                self.cmake_args += [
                  "-DCMAKE_SYSTEM_NAME=Android",
                  f"-DCMAKE_ANDROID_NDK={android_ndk_dir}",
                  f"-DCMAKE_ANDROID_ARCH_ABI={arch}",
                  f"-DCMAKE_SYSTEM_VERSION={android_api_level}"
                ]

            if __name__ == "__main__":
              parser = argparse.ArgumentParser()
              parser.add_argument("--platform", type=str, required=True)
              parser.add_argument("--arch", type=str, required=True)
              parser.add_argument("--library_build_type", type=str, default="static")
              parser.add_argument("--android_ndk_dir", type=str)
              parser.add_argument("--cmake_dir", type=str)
              parser.add_argument("--llvm_dir", type=str)
              args = parser.parse_args()

              logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

              platform = args.platform
              arch = args.arch
              library_build_type = args.library_build_type

              PlatformBuilder.cmake_dir = args.cmake_dir
              PlatformBuilder.llvm_dir = args.llvm_dir

              project_dir = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
              logging.info("project dir: {}".format(project_dir))
              if not os.path.exists(f"{project_dir}/CMakeLists.txt"):
                logging.error("Please run this script in Dobby project root directory")
                sys.exit(1)

              if platform not in platforms:
                logging.error("invalid platform {}".format(platform))
                sys.exit(-1)

              if arch != "all" and arch not in platforms[platform]:
                logging.error("invalid arch {} for platform {}".format(arch, platform))
                sys.exit(-1)

              if platform == "android" and args.android_ndk_dir is None:
                logging.error("ndk dir is required for android platform")
                sys.exit(-1)

              archs = platforms[platform] if arch == "all" else [arch]
              logging.info("build platform: {}, archs: {}".format(platform, archs))

              for arch_ in archs:
                if platform == "android":
                  builder = AndroidPlatformBuilder(args.android_ndk_dir, project_dir, library_build_type, arch_)
                  logging.info(
                    f"build platform: {platform}, arch: {arch_}, cmake_build_dir: {builder.cmake_build_dir}, output_dir: {builder.output_dir}"
                  )
                  builder.build()

      - name: Fetch config.json
        run: |
          wget https://raw.githubusercontent.com/AlirezaParsi/COPG/refs/heads/JSON/config.json -O config.json

      - name: Build Project (arm64-v8a)
        uses: threeal/cmake-action@v2.1.0
        with:
          build-dir: build/arm64-v8a
          args: |
            -DCMAKE_TOOLCHAIN_FILE=${{ env.NDK_PATH }}/build/cmake/android.toolchain.cmake
            -DANDROID_ABI=arm64-v8a
            -DANDROID_PLATFORM=android-34
            -DCMAKE_MAKE_PROGRAM=/usr/bin/make
            -DDOBBY_LIBRARY=${{ github.workspace }}/dobby/libdobby-arm64.a

      - name: Check arm64-v8a output
        run: |
          if [ ! -f "build/arm64-v8a/libspoof.so" ]; then
            echo "Error: arm64-v8a library not built!"
            ls -la build/arm64-v8a
            exit 1
          fi

      - name: Build Project (armeabi-v7a)
        uses: threeal/cmake-action@v2.1.0
        with:
          build-dir: build/armeabi-v7a
          args: |
            -DCMAKE_TOOLCHAIN_FILE=${{ env.NDK_PATH }}/build/cmake/android.toolchain.cmake
            -DANDROID_ABI=armeabi-v7a
            -DANDROID_PLATFORM=android-34
            -DCMAKE_MAKE_PROGRAM=/usr/bin/make
            -DDOBBY_LIBRARY=${{ github.workspace }}/dobby/libdobby-armv7-a.a

      - name: Check armeabi-v7a output
        run: |
          if [ ! -f "build/armeabi-v7a/libspoof.so" ]; then
            echo "Error: armeabi-v7a library not built!"
            ls -la build/armeabi-v7a
            exit 1
          fi

      - name: Prepare module structure
        run: |
          mkdir -p module/zygisk
          mkdir -p module/META-INF/com/google/android
          cp build/arm64-v8a/libspoof.so module/zygisk/arm64-v8a.so
          cp build/armeabi-v7a/libspoof.so module/zygisk/armeabi-v7a.so
          chmod 755 module/zygisk/arm64-v8a.so
          chmod 755 module/zygisk/armeabi-v7a.so
          cat > module/module.prop << 'EOF'
          id=COPG
          name=✨ COPG spoof ✨
          version=2.3
          versionCode=230
          author=AlirezaParsi
          description=Spoof your device for games. Run 'sh $MODPATH/action.sh' to update config.json from GitHub.
          support=https://t.me/theaosp
          updateJson=https://raw.githubusercontent.com/AlirezaParsi/COPG/refs/heads/JSON/update.json
          minMagisk=20.4
          EOF
          cat > module/customize.sh << 'EOF'
          #!/system/bin/sh
          if ! $BOOTMODE; then
            ui_print "*********************************************************"
            ui_print "! Install from recovery is NOT supported"
            ui_print "! Please install from Magisk, KernelSU, or APatch app"
            abort "*********************************************************"
          fi
          if [ "$API" -lt 26 ]; then
            abort "! This module requires Android 8.0 or higher"
          fi
          check_zygisk() {
            ZYGISK_MODULE="/data/adb/modules/ZygiskNext"
            MAGISK_DIR="/data/adb/magisk"
            ZYGISK_MSG="Zygisk is not enabled. Please either:
            - Enable Zygisk in Magisk settings and reboot
            - Install ZygiskNext module for KernelSU and reboot"
            if [ -d "/data/adb/ksu" ]; then
              if ! [ -d "$ZYGISK_MODULE" ]; then
                ui_print "*********************************************************"
                ui_print "! $ZYGISK_MSG"
                abort "*********************************************************"
              else
                ui_print "- ZygiskNext detected for KernelSU"
              fi
            elif [ -d "$MAGISK_DIR" ]; then
              ZYGISK_STATUS=$(magisk --sqlite "SELECT value FROM settings WHERE key='zygisk';" 2>/dev/null)
              if [ "$ZYGISK_STATUS" = "value=0" ] || [ -z "$ZYGISK_STATUS" ]; then
                ui_print "*********************************************************"
                ui_print "! $ZYGISK_MSG"
                abort "*********************************************************"
              else
                ui_print "- Zygisk enabled in Magisk"
              fi
            else
              ui_print "*********************************************************"
              ui_print "! No supported root solution detected!"
              ui_print "! This module requires Magisk with Zygisk or KernelSU with ZygiskNext"
              abort "*********************************************************"
            fi
          }
          check_zygisk
          chmod +x "$MODPATH/action.sh"
          ui_print "- SpoofModule setup complete"
          ui_print "- Run 'sh $MODPATH/action.sh' to download config.json"
          EOF
          chmod 755 module/customize.sh
          cat > module/action.sh << 'EOF'
          #!/system/bin/sh
          MODDIR="/data/adb/modules/COPG"
          CONFIG_URL="https://raw.githubusercontent.com/AlirezaParsi/COPG/refs/heads/JSON/config.json"
          CONFIG_PATH="$MODDIR/config.json"
          log() {
            echo "🌟 [SpoofModule] $1"
          }
          if command -v curl >/dev/null 2>&1; then
            DOWNLOADER="curl -s -o"
          elif command -v wget >/dev/null 2>&1; then
            DOWNLOADER="wget -q -O"
          else
            log "❌ Error: curl or wget not found. Please install one to download config."
            exit 1
          fi
          log "⬇️ Downloading config.json from GitHub..."
          $DOWNLOADER "$CONFIG_PATH" "$CONFIG_URL"
          if [ $? -eq 0 ]; then
            log "✅ Config downloaded successfully!"
            log "📍 Saved to: $CONFIG_PATH"
            chmod 644 "$CONFIG_PATH"
          else
            log "❌ Failed to download config.json. Check your internet or URL."
            exit 1
          fi
          log "✨ SpoofModule config update complete!"
          EOF
          chmod 755 module/action.sh
          cat > module/uninstall.sh << 'EOF'
          rm -rf /data/adb/modules/COPG
          EOF
          chmod 755 module/uninstall.sh
          cat > module/META-INF/com/google/android/update-binary << 'EOF'
          umask 022
          ui_print() { echo "$1"; }
          require_new_magisk() {
            ui_print "*******************************"
            ui_print " Please install Magisk v20.4+! "
            ui_print "*******************************"
            exit 1
          }
          OUTFD=$2
          ZIPFILE=$3
          [ -f /data/adb/magisk/util_functions.sh ] || require_new_magisk
          . /data/adb/magisk/util_functions.sh
          [ $MAGISK_VER_CODE -lt 20400 ] && require_new_magisk
          install_module
          exit 0
          EOF
          chmod 755 module/META-INF/com/google/android/update-binary
          cat > module/META-INF/com/google/android/updater-script << 'EOF'
          #MAGISK
          EOF
          cp config.json module/config.json

      - name: Package module into ZIP
        run: |
          VERSION=$(grep "version=" module/module.prop | cut -d'=' -f2)
          ZIP_NAME="COPG-v$VERSION.zip"
          cd module
          zip -r "../$ZIP_NAME" .
          cd ..
          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV

      - name: Upload Module ZIP as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: COPG
          path: ${{ env.ZIP_NAME }}

      - name: Upload ZIP to GitHub Release
        if: github.event.inputs.upload_to_release == 'true'
        run: |
          VERSION=$(grep "version=" module/module.prop | cut -d'=' -f2)
          TAG="v$VERSION"
          gh release create "$TAG" \
            --title "Release $TAG" \
            --notes "Built on $(date -u +'%Y-%m-%d %H:%M:%S UTC')" \
            --draft \
            || gh release edit "$TAG" --draft
          gh release upload "$TAG" ${{ env.ZIP_NAME }} --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload ZIP to Telegram
        if: github.event.inputs.upload_to_telegram == 'true'
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          document: ${{ env.ZIP_NAME }}
          message: |
            New COPG Spoof Module Build
            Version: ${{ env.VERSION }}
            Built on: ${{ github.run_id }} @ ${{ github.sha }}
