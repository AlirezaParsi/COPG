name: building json

on:
  workflow_dispatch:
    inputs:
      upload_to_release:
        description: 'Upload ZIP to GitHub Release?'
        type: boolean
        required: true
        default: false
      upload_to_telegram:
        description: 'Upload ZIP to Telegram?'
        type: boolean
        required: true
        default: false
      branch:
        description: 'Branch to build from'
        type: string
        required: true
        default: 'JSON'

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-24.04
    environment: Telegram

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '8'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Set up Android SDK and NDK
        run: |
          wget -q https://dl.google.com/android/repository/android-ndk-r27-linux.zip -O ndk.zip
          unzip -q ndk.zip -d $HOME
          echo "NDK_PATH=$HOME/android-ndk-r27" >> $GITHUB_ENV
          wget -q https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip -O sdk.zip
          unzip -q sdk.zip -d $HOME/android-sdk
          echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV
          echo "$ANDROID_HOME/tools/bin" >> $GITHUB_PATH

      - name: Accept Android SDK licenses
        run: |
          yes | $ANDROID_HOME/tools/bin/sdkmanager --licenses
          $ANDROID_HOME/tools/bin/sdkmanager "platforms;android-34" "build-tools;34.0.0"

      - name: Install build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential zip git xz-utils

      - name: Fetch Zygisk Headers and JSON Library
        run: |
          mkdir -p zygisk include/nlohmann
          wget https://raw.githubusercontent.com/topjohnwu/zygisk-module-sample/master/module/jni/zygisk.hpp -O zygisk/zygisk.hh
          wget https://github.com/nlohmann/json/releases/download/v3.11.3/json.hpp -O include/nlohmann/json.hpp

      - name: Fetch Frida Gadget 16.7.0
        run: |
          mkdir -p frida
          wget https://github.com/frida/frida/releases/download/16.7.0/frida-gadget-16.7.0-android-arm64.so.xz -O frida-gadget-arm64.so.xz
          wget https://github.com/frida/frida/releases/download/16.7.0/frida-gadget-16.7.0-android-arm.so.xz -O frida-gadget-arm.so.xz
          xz -d frida-gadget-arm64.so.xz
          xz -d frida-gadget-arm.so.xz
          mv frida-gadget-arm64.so frida/libfrida-gadget-arm64.so
          mv frida-gadget-arm.so frida/libfrida-gadget-armv7-a.so

      - name: Build Project (arm64-v8a)
        run: |
          mkdir -p build/arm64-v8a
          $NDK_PATH/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android34-clang++ \
            -shared -fPIC -std=c++17 \
            -I${{ github.workspace }}/zygisk \
            -I${{ github.workspace }}/include/nlohmann \
            spoof_module.cpp -o build/arm64-v8a/libspoof.so \
            -llog

      - name: Build Project (armeabi-v7a)
        run: |
          mkdir -p build/armeabi-v7a
          $NDK_PATH/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi34-clang++ \
            -shared -fPIC -std=c++17 \
            -I${{ github.workspace }}/zygisk \
            -I${{ github.workspace }}/include/nlohmann \
            spoof_module.cpp -o build/armeabi-v7a/libspoof.so \
            -llog

      - name: Check build outputs
        run: |
          [ -f build/arm64-v8a/libspoof.so ] || { echo "Error: arm64-v8a library not built!"; ls -la build/arm64-v8a; exit 1; }
          [ -f build/armeabi-v7a/libspoof.so ] || { echo "Error: armeabi-v7a library not built!"; ls -la build/armeabi-v7a; exit 1; }

      - name: Prepare module structure
        run: |
          mkdir -p module/zygisk module/META-INF/com/google/android module/frida
          cp build/arm64-v8a/libspoof.so module/zygisk/arm64-v8a.so
          cp build/armeabi-v7a/libspoof.so module/zygisk/armeabi-v7a.so
          cp frida/libfrida-gadget-arm64.so module/frida/libcopg-arm64.so
          cp frida/libfrida-gadget-armv7-a.so module/frida/libcopg-armv7-a.so
          cp spoof.js module/spoof.js
          chmod 755 module/zygisk/*.so module/frida/*.so module/spoof.js
          echo '{"interaction":{"type":"script","path":"/data/adb/modules/COPG/spoof.js"}}' > module/frida/config.json
          cat > module/module.prop << 'EOF'
          id=COPG
          name=✨ COPG spoof ✨
          version=2.3
          versionCode=230
          author=AlirezaParsi
          description=Spoof your device for games with Frida 16.7.0. Click Action button to update your config if needed.
          support=https://t.me/theaosp
          updateJson=https://raw.githubusercontent.com/AlirezaParsi/COPG/refs/heads/JSON/update.json
          minMagisk=20.4
          EOF
          cat > module/customize.sh << 'EOF'
          #!/system/bin/sh
          if ! $BOOTMODE; then
            ui_print "*********************************************************"
            ui_print "! Install from recovery is NOT supported"
            ui_print "! Please install from Magisk, KernelSU, or APatch app"
            abort "*********************************************************"
          fi
          if [ "$API" -lt 26 ]; then
            abort "! This module requires Android 8.0 or higher"
          fi
          check_zygisk() {
            ZYGISK_MODULE="/data/adb/modules/zygisksu"
            MAGISK_DIR="/data/adb/magisk"
            ZYGISK_MSG="Zygisk is not enabled. Please either:
            - Enable Zygisk in Magisk settings and reboot
            - Install zygisksu module for KernelSU and reboot"
            if [ -d "/data/adb/ksu" ]; then
              if ! [ -d "$ZYGISK_MODULE" ]; then
                ui_print "*********************************************************"
                ui_print "! $ZYGISK_MSG"
                abort "*********************************************************"
              else
                ui_print "- zygisksu detected for KernelSU"
              fi
            elif [ -d "$MAGISK_DIR" ]; then
              ZYGISK_STATUS=$(magisk --sqlite "SELECT value FROM settings WHERE key='zygisk';" 2>/dev/null)
              if [ "$ZYGISK_STATUS" = "value=0" ] || [ -z "$ZYGISK_STATUS" ]; then
                ui_print "*********************************************************"
                ui_print "! $ZYGISK_MSG"
                abort "*********************************************************"
              else
                ui_print "- Zygisk enabled in Magisk"
              fi
            else
              ui_print "*********************************************************"
              ui_print "! No supported root solution detected!"
              ui_print "! This module requires Magisk with Zygisk or KernelSU with zygisksu"
              abort "*********************************************************"
            fi
          }
          check_zygisk
          chmod +x "$MODPATH/action.sh"
          ui_print "- COPG setup complete with Frida 16.7.0"
          ui_print "- Click Action button to update your config if needed"
          EOF
          chmod 755 module/customize.sh
          cat > module/action.sh << 'EOF'
          #!/system/bin/sh
          MODDIR="/data/adb/modules/COPG"
          CONFIG_URL="https://raw.githubusercontent.com/AlirezaParsi/COPG/refs/heads/JSON/config.json"
          CONFIG_PATH="$MODDIR/config.json"
          log() {
            echo "🌟 [COPG] $1"
          }
          if command -v curl >/dev/null 2>&1; then
            DOWNLOADER="curl -s -o"
          elif command -v wget >/dev/null 2>&1; then
            DOWNLOADER="wget -q -O"
          else
            log "❌ Error: curl or wget not found. Please install one to download config."
            exit 1
          fi
          log "⬇️ Downloading config.json from GitHub..."
          $DOWNLOADER "$CONFIG_PATH" "$CONFIG_URL"
          if [ $? -eq 0 ]; then
            log "✅ Config downloaded successfully!"
            log "📍 Saved to: $CONFIG_PATH"
            chmod 644 "$CONFIG_PATH"
            log "🔄 Reboot your device to apply changes"
          else
            log "❌ Failed to download config.json. Check your internet or URL."
            exit 1
          fi
          log "✨ COPG config update complete!"
          EOF
          chmod 755 module/action.sh
          cat > module/uninstall.sh << 'EOF'
          rm -rf /data/adb/modules/COPG
          EOF
          chmod 755 module/uninstall.sh
          cat > module/META-INF/com/google/android/update-binary << 'EOF'
          umask 022
          ui_print() { echo "$1"; }
          require_new_magisk() {
            ui_print "*******************************"
            ui_print " Please install Magisk v20.4+! "
            ui_print "*******************************"
            exit 1
          }
          OUTFD=$2
          ZIPFILE=$3
          [ -f /data/adb/magisk/util_functions.sh ] || require_new_magisk
          . /data/adb/magisk/util_functions.sh
          [ $MAGISK_VER_CODE -lt 20400 ] && require_new_magisk
          install_module
          exit 0
          EOF
          chmod 755 module/META-INF/com/google/android/update-binary
          echo "#MAGISK" > module/META-INF/com/google/android/updater-script

      - name: Package module into ZIP
        run: |
          VERSION=$(grep "version=" module/module.prop | cut -d'=' -f2)
          ZIP_NAME="COPG-v$VERSION.zip"
          cd module
          zip -r "../$ZIP_NAME" .
          cd ..
          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV

      - name: Upload Module ZIP as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: COPG
          path: ${{ env.ZIP_NAME }}

      - name: Upload ZIP to GitHub Release
        if: github.event.inputs.upload_to_release == 'true'
        run: |
          VERSION=$(grep "version=" module/module.prop | cut -d'=' -f2)
          TAG="v$VERSION"
          gh release create "$TAG" --title "Release $TAG" --notes "Built on $(date -u +'%Y-%m-%d %H:%M:%S UTC')" --draft || gh release edit "$TAG" --draft
          gh release upload "$TAG" ${{ env.ZIP_NAME }} --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload ZIP to Telegram
        if: github.event.inputs.upload_to_telegram == 'true'
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          document: ${{ env.ZIP_NAME }}
          message: |
            New COPG Spoof Module Build
            Version: ${{ env.VERSION }}
            Built on: ${{ github.run_id }} @ ${{ github.sha }}
